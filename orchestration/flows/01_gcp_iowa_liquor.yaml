id: 08_gcp_iowa_liquor
namespace: zoomcamp
description: |
  Iowa Liquor Sales Data from Google Bigquery. The data is also available at https://data.iowa.gov/Sales-Distribution/Iowa-Liquor-Sales/m3tr-qhgy/about_data
inputs:
- id: liquor
  type: SELECT
  displayName: Select taxi type
  values: [ iowa, chicago ]
  defaults: iowa
- id: year
  type: SELECT
  displayName: Select year
  values: [ "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024" ]
  defaults: "2012"
  allowCustomValue: true # allows you to type 2021 from the UI for the homework ðŸ¤—

- id: month
  type: SELECT
  displayName: Select month
  values: [ "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" ]
  defaults: "01"

variables:
  file: "{{inputs.liquor}}_sales_{{inputs.year}}-{{inputs.month}}.csv"
  gcs_bucket: "gs://{{kv('GCP_BUCKET_NAME')}}"
  aws_bucket: "{{kv('AWS_BUCKET_NAME')}}"
  aws_location: "{{kv('AWS_LOCATION')}}"
  gcs_file: "{{vars.gcs_bucket}}/{{vars.file}}"
  aws_file: "iowa_sales/{{vars.file}}"
  table: "{{kv('GCP_DATASET')}}.{{inputs.liquor}}_sales_{{inputs.year}}_{{inputs.month}}"
  data: "{{outputs.extract.outputFiles[inputs.liquor ~ '_sales_' ~ inputs.year ~ '-' ~ inputs.month ~ '.csv']}}"

tasks:
- id: set_label
  type: io.kestra.plugin.core.execution.Labels
  labels:
    file: "{{render(vars.file)}}"
    liquor: "{{inputs.liquor}}"

- id: extract
  type: io.kestra.plugin.scripts.python.Script
  outputFiles:
  - "*.csv"
  description: Merge parquet files using Python
  containerImage: ghcr.io/kestra-io/pydata:latest # Use Python container with pandas installed
  beforeCommands:
  - pip install pandas requests google-cloud-bigquery google-cloud-bigquery-storage db-dtypes
  - pip install --upgrade google-cloud-storage

  script: |
    import os
    import ast
    from google.cloud import bigquery
    import pandas
    import pandas as pd
    from google.oauth2 import service_account

    credentials = service_account.Credentials.from_service_account_info({{ kv('GCP_CREDS') }})

    project_id = "{{kv('GCP_PROJECT_ID')}}" # _set_env('PROJECT_ID')

    client = bigquery.Client(location="US",credentials=credentials, project=project_id)
    query = f"""
      SELECT *,
      SAFE_CAST(REGEXP_REPLACE(zip_code, r'\.0$', '') AS INT64) AS zip_code_int,
      ST_X(store_location) AS longitude,
      ST_Y(store_location) AS latitude
      FROM bigquery-public-data.iowa_liquor_sales.sales
      WHERE store_location IS NOT NULL AND 
      EXTRACT(YEAR FROM date)={{inputs.year}}
      AND EXTRACT(MONTH FROM date)={{inputs.month}}"""
    # print(query)
    query_job = client.query(query)

    df = query_job.to_dataframe() # Wait for the job to complete.
    df.drop(columns=['store_location'], inplace=True)
    df.date = pd.to_datetime(df.date)
    # df.updated_on = pd.to_datetime(df.updated_on)

    # Save as one csv
    df.to_csv("{{render(vars.file)}}", index=False)

- id: upload-to-gcs
  type: io.kestra.plugin.gcp.gcs.Upload
  description: Upload the merged Parquet file to GCS
  from: "{{render(vars.data)}}"
  to: "{{render(vars.gcs_file)}}"

- id: aws_s3_upload
  type: io.kestra.plugin.aws.s3.Upload
  accessKeyId: "{{ kv('AWS_ACCESS_KEY_ID') }}"
  secretKeyId: "{{ kv('AWS_SECRET_ACCESS_KEY') }}"
  region: "{{render(vars.aws_location)}}"
  from: "{{render(vars.data)}}"
  bucket: "{{render(vars.aws_bucket)}}"
  key: "{{render(vars.aws_file)}}"


- id: if_iowa_liquor
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.liquor == 'iowa'}}"
    then:
      - id: bq_iowa_liquor
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.iowa_liquor`
          (
              unique_row_id BYTES OPTIONS (description = 'A unique identifier for the trip, generated by hashing key trip attributes.'),
              filename STRING OPTIONS (description = 'The source filename from which the trip data was loaded.'),      
              invoice_and_item_number STRING OPTIONS (description = 'Concatenated invoice and line number associated with the liquor order. This provides a unique identifier for the individual liquor products included in the store order.'),
              date DATE OPTIONS (description = 'Date of order'),
              store_number STRING OPTIONS (description = 'Unique number assigned to the store who ordered the liquor.'),
              store_name STRING OPTIONS (description = 'Name of store who ordered the liquor.'),
              address STRING OPTIONS (description = 'Address of store who ordered the liquor.'),
              city STRING OPTIONS (description = 'City where the store who ordered the liquor is located.'),
              zip_code STRING OPTIONS (description = 'Zip code where the store who ordered the liquor is located.'),
              store_location GEOGRAPHY OPTIONS (description = 'Location of store who ordered the liquor. The Address, City, State and Zip Code are geocoded to provide geographic coordinates. Accuracy of geocoding is dependent on how well the address is interpreted and the completeness of the reference data used.'),
              county_number STRING OPTIONS (description = 'Iowa county number for the county where store who ordered the liquor is located.'),
              county STRING OPTIONS (description = 'County where the store who ordered the liquor is located.'),
              category STRING OPTIONS (description = 'Category code associated with the liquor ordered.'),
              category_name STRING OPTIONS (description = 'Category of the liquor ordered.'),
              vendor_number STRING OPTIONS (description = 'The vendor number of the company for the brand of liquor ordered.'),
              vendor_name STRING OPTIONS (description = 'The vendor name of the company for the brand of liquor ordered.'),
              item_number STRING OPTIONS (description = 'Item number for the individual liquor product ordered.'),
              item_description STRING OPTIONS (description = 'Description of the individual liquor product ordered.'),
              pack INTEGER OPTIONS (description = 'The number of bottles in a case for the liquor ordered.'),
              bottle_volume_ml INTEGER OPTIONS (description = 'Volume of each liquor bottle ordered in milliliters.'),
              state_bottle_cost FLOAT OPTIONS (description = 'The amount that Alcoholic Beverages Division paid for each bottle of liquor ordered.'),
              state_bottle_retail FLOAT OPTIONS (description = 'The amount the store paid for each bottle of liquor ordered.'),
              bottles_sold INTEGER OPTIONS (description = 'The number of bottles of liquor ordered by the store.'),
              sale_dollars FLOAT OPTIONS (description = 'Total cost of liquor order (number of bottles multiplied by the state bottle retail).'),
              volume_sold_liters FLOAT OPTIONS (description = 'Total volume of liquor ordered in liters. (i.e. (Bottle Volume (ml) x Bottles Sold)/1,000)".'),
              volume_sold_gallons FLOAT OPTIONS (description = 'Total volume of liquor ordered in gallons. (i.e. (Bottle Volume (ml) x.')
          )
          PARTITION BY DATE(date);

      - id: bq_iowa_table_ext
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`
          (
              invoice_and_item_number STRING OPTIONS (description = 'Concatenated invoice and line number associated with the liquor order. This provides a unique identifier for the individual liquor products included in the store order.'),
              date DATE OPTIONS (description = 'Date of order'),
              store_number STRING OPTIONS (description = 'Unique number assigned to the store who ordered the liquor.'),
              store_name STRING OPTIONS (description = 'Name of store who ordered the liquor.'),
              address STRING OPTIONS (description = 'Address of store who ordered the liquor.'),
              city STRING OPTIONS (description = 'City where the store who ordered the liquor is located.'),
              zip_code STRING OPTIONS (description = 'Zip code where the store who ordered the liquor is located.'),
              store_location GEOGRAPHY OPTIONS (description = 'Location of store who ordered the liquor. The Address, City, State and Zip Code are geocoded to provide geographic coordinates. Accuracy of geocoding is dependent on how well the address is interpreted and the completeness of the reference data used.'),
              county_number STRING OPTIONS (description = 'Iowa county number for the county where store who ordered the liquor is located.'),
              county STRING OPTIONS (description = 'County where the store who ordered the liquor is located.'),
              category STRING OPTIONS (description = 'Category code associated with the liquor ordered.'),
              category_name STRING OPTIONS (description = 'Category of the liquor ordered.'),
              vendor_number STRING OPTIONS (description = 'The vendor number of the company for the brand of liquor ordered.'),
              vendor_name STRING OPTIONS (description = 'The vendor name of the company for the brand of liquor ordered.'),
              item_number STRING OPTIONS (description = 'Item number for the individual liquor product ordered.'),
              item_description STRING OPTIONS (description = 'Description of the individual liquor product ordered.'),
              pack INTEGER OPTIONS (description = 'The number of bottles in a case for the liquor ordered.'),
              bottle_volume_ml INTEGER OPTIONS (description = 'Volume of each liquor bottle ordered in milliliters.'),
              state_bottle_cost FLOAT OPTIONS (description = 'The amount that Alcoholic Beverages Division paid for each bottle of liquor ordered.'),
              state_bottle_retail FLOAT OPTIONS (description = 'The amount the store paid for each bottle of liquor ordered.'),
              bottles_sold INTEGER OPTIONS (description = 'The number of bottles of liquor ordered by the store.'),
              sale_dollars FLOAT OPTIONS (description = 'Total cost of liquor order (number of bottles multiplied by the state bottle retail).'),
              volume_sold_liters FLOAT OPTIONS (description = 'Total volume of liquor ordered in liters. (i.e. (Bottle Volume (ml) x Bottles Sold)/1,000)".'),
              volume_sold_gallons FLOAT OPTIONS (description = 'Total volume of liquor ordered in gallons. (i.e. (Bottle Volume (ml) x.')
          
          )
          OPTIONS (
              format = 'CSV',
              uris = ['{{render(vars.gcs_file)}}'],
              skip_leading_rows = 1,
              ignore_unknown_values = TRUE
          );

      - id: bq_iowa_table_tmp
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}`
          AS
          SELECT
            MD5(CONCAT(
              COALESCE(CAST(invoice_and_item_number AS STRING), ""),
              COALESCE(CAST(date AS STRING), ""),
              COALESCE(CAST(store_number AS STRING), ""),
              COALESCE(CAST(zip_code AS STRING), ""),
              COALESCE(CAST(vendor_number AS STRING), "")
            )) AS unique_row_id,
            "{{render(vars.file)}}" AS filename,
            *
          FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

      - id: bq_iowa_merge
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.iowa_liquor` T
          USING `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}` S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
            INSERT (unique_row_id, filename, invoice_and_item_number, date, store_number, store_name, address, city, zip_code, store_location, county_number, county, category, category_name, vendor_number, vendor_name, item_number, item_description, pack, bottle_volume_ml, state_bottle_cost, state_bottle_retail, bottles_sold, sale_dollars, volume_sold_liters, volume_sold_gallons)
            VALUES (S.unique_row_id, S.filename, S.invoice_and_item_number, S.date, S.store_number, S.store_name, S.address, S.city, S.zip_code, S.store_location, S.county_number, S.county, S.category, S.category_name, S.vendor_number, S.vendor_name, S.item_number, S.item_description, S.pack, S.bottle_volume_ml, S.state_bottle_cost, S.state_bottle_retail, S.bottles_sold, S.sale_dollars, S.volume_sold_liters, S.volume_sold_gallons);



  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: If you'd like to explore Kestra outputs, disable it.
    disabled: false

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"